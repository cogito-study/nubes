// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, Note, Subject, Comment, SubjectInfo } from "./prisma-client";
import { AuthPayload } from "../types";
import { Context } from "../types";

type NoteType = "NOTE" | "CASE_STUDY";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsNote {
    id: string;
  }

  export interface ArgsSubject {
    id: string;
  }

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type NotesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Note[] | Promise<Note[]>;

  export type SubjectsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Subject[] | Promise<Subject[]>;

  export type NoteResolver = (
    parent: undefined,
    args: ArgsNote,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Note | null | Promise<Note | null>;

  export type SubjectResolver = (
    parent: undefined,
    args: ArgsSubject,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Subject | null | Promise<Subject | null>;

  export interface Type {
    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    notes: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Note[] | Promise<Note[]>;

    subjects: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Subject[] | Promise<Subject[]>;

    note: (
      parent: undefined,
      args: ArgsNote,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Note | null | Promise<Note | null>;

    subject: (
      parent: undefined,
      args: ArgsSubject,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Subject | null | Promise<Subject | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    firstname: (parent: User) =>
      parent.firstname === undefined ? null : parent.firstname,
    lastname: (parent: User) =>
      parent.lastname === undefined ? null : parent.lastname,
    neptun: (parent: User) => parent.neptun,
    isAdmin: (parent: User) => parent.isAdmin
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FirstnameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LastnameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NeptunResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IsAdminResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    firstname: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    lastname: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    neptun: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    isAdmin: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace NoteResolvers {
  export const defaultResolvers = {
    authorId: (parent: Note) => parent.authorId,
    text: (parent: Note) => parent.text,
    comments: (parent: Note) => parent.comments,
    noteType: (parent: Note) => parent.noteType,
    description: (parent: Note) =>
      parent.description === undefined ? null : parent.description,
    upvotes: (parent: Note) => parent.upvotes
  };

  export type IdResolver = (
    parent: Note,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AuthorIdResolver = (
    parent: Note,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TextResolver = (
    parent: Note,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CommentsResolver = (
    parent: Note,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type NoteTypeResolver = (
    parent: Note,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NoteType | Promise<NoteType>;

  export type DescriptionResolver = (
    parent: Note,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UpvotesResolver = (
    parent: Note,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export interface Type {
    id: (
      parent: Note,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    authorId: (
      parent: Note,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    text: (
      parent: Note,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    comments: (
      parent: Note,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    noteType: (
      parent: Note,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => NoteType | Promise<NoteType>;

    description: (
      parent: Note,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    upvotes: (
      parent: Note,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;
  }
}

export namespace SubjectResolvers {
  export const defaultResolvers = {
    name: (parent: Subject) => parent.name,
    code: (parent: Subject) => parent.code,
    faculty: (parent: Subject) => parent.faculty,
    students: (parent: Subject) => parent.students,
    subjectInfos: (parent: Subject) => parent.subjectInfos,
    prerequisites: (parent: Subject) => parent.prerequisites,
    notes: (parent: Subject) => parent.notes
  };

  export type IdResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CodeResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FacultyResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type StudentsResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type SubjectInfosResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type PrerequisitesResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type NotesResolver = (
    parent: Subject,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export interface Type {
    id: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    code: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    faculty: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    students: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    subjectInfos: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    prerequisites: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    notes: (
      parent: Subject,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
    neptun: string;
    isAdmin: boolean;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export namespace CommentResolvers {
  export const defaultResolvers = {
    authorId: (parent: Comment) => parent.authorId,
    text: (parent: Comment) => parent.text,
    replies: (parent: Comment) => parent.replies,
    upvotes: (parent: Comment) => parent.upvotes
  };

  export type IdResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AuthorIdResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TextResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RepliesResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type UpvotesResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export interface Type {
    id: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    authorId: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    text: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    replies: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    upvotes: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;
  }
}

export namespace SubjectInfoResolvers {
  export const defaultResolvers = {
    title: (parent: SubjectInfo) => parent.title,
    subtitle: (parent: SubjectInfo) =>
      parent.subtitle === undefined ? null : parent.subtitle,
    text: (parent: SubjectInfo) => parent.text
  };

  export type TitleResolver = (
    parent: SubjectInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SubtitleResolver = (
    parent: SubjectInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TextResolver = (
    parent: SubjectInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    title: (
      parent: SubjectInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    subtitle: (
      parent: SubjectInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    text: (
      parent: SubjectInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Note: NoteResolvers.Type;
  Subject: SubjectResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  Comment: CommentResolvers.Type;
  SubjectInfo: SubjectInfoResolvers.Type;
}
