### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


"""Input of invite activation"""
input ActivateInvitationInput {
  password: String!
  token: String!
}

"""Input of register activation"""
input ActivateRegistrationInput {
  major: ConnectRelation!
  subjects: [ConnectRelation!]!
  token: String!
}

type ActivationToken {
  createdAt: DateTime!
  id: ID!
  token: String!
  user: User!
}

input ActivationTokenWhereInput {
  AND: [ActivationTokenWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ActivationTokenWhereInput!]
  OR: [ActivationTokenWhereInput!]
  token: StringFilter
  user: UserWhereInput
}

type AuthenticationPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input ChangeEmailInput {
  email: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

"""Input of update user's profile"""
input ChangePreferredLanguageInput {
  preferredLanguage: ConnectRelation!
}

input ConnectOrDisconnectRelation {
  connect: [ConnectRelation!]
  disconnect: [ConnectRelation!]
}

input ConnectRelation {
  id: ID!
}

"""Input of create department"""
input CreateDepartmentInput {
  description: String!
  institute: ConnectRelation!
  leader: ConnectRelation!
  name: String!
}

"""Input of create faculty"""
input CreateFacultyInput {
  institute: ConnectRelation!
  name: String!
}

"""Input of create institute"""
input CreateInstituteInput {
  name: String!
}

"""Input of create major"""
input CreateMajorInput {
  faculty: ConnectRelation!
  name: String!
}

"""Input of create new major request"""
input CreateNewMajorRequest {
  faculty: String!
  institute: String!
  major: String!
  token: String!
}

"""Input of create note comment"""
input CreateNoteCommentInput {
  author: ConnectRelation!
  content: String!
  name: String!
}

"""Input of create note comment"""
input CreateNoteCommentThreadInput {
  comment: ConnectRelation!
  name: String!
  note: ConnectRelation!
  position: String!
}

"""Input of create note highlight"""
input CreateNoteHighlightInput {
  note: ConnectRelation!
  position: String!
  user: ConnectRelation!
}

"""Input of create note"""
input CreateNoteInput {
  content: String!
  contentHTML: String!
  description: String
  noteCategory: NoteCategory!
  number: Int!
  subject: ConnectRelation!
  title: String!
}

"""Input of create post comment"""
input CreatePostCommentInput {
  content: String!
  name: String!
  post: ConnectRelation!
}

"""Input of create post"""
input CreatePostInput {
  content: String!
  subject: ConnectRelation!
}

"""Input of create subject information"""
input CreateSubjectInformationInput {
  content: String!
  subject: ConnectRelation!
  subtitle: String
  title: String!
}

"""Input of create subject"""
input CreateSubjectInput {
  code: String!
  department: ConnectRelation!
  description: String!
  language: ConnectRelation!
  name: String!
}

"""Input of create suggestion"""
input CreateSuggestionInput {
  delta: String!
  note: ConnectRelation!
}

"""Input of create user"""
input CreateUserInput {
  email: String!
  firstName: String!
  identifier: String!
  lastName: String!
  role: String!
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Department {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: ID!
  institute: Institute!
  leader: User!
  name: String!
  permissions: [DepartmentPermissionType!]!
  subjects: [Subject!]!
  updatedAt: DateTime!
}

input DepartmentFilter {
  every: DepartmentWhereInput
  none: DepartmentWhereInput
  some: DepartmentWhereInput
}

type DepartmentPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Department!
  type: DepartmentPermissionType!
  updatedAt: DateTime!
}

input DepartmentPermissionFilter {
  every: DepartmentPermissionWhereInput
  none: DepartmentPermissionWhereInput
  some: DepartmentPermissionWhereInput
}

enum DepartmentPermissionType {
  CREATE_SUBJECT
  DELETE_DEPARTMENT
  READ_DEPARTMENT
  UPDATE_DEPARTMENT
}

input DepartmentPermissionWhereInput {
  AND: [DepartmentPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [DepartmentPermissionWhereInput!]
  object: DepartmentWhereInput
  OR: [DepartmentPermissionWhereInput!]
  type: DepartmentPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  description: StringFilter
  id: StringFilter
  institute: InstituteWhereInput
  leader: UserWhereInput
  name: StringFilter
  NOT: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  permissions: DepartmentPermissionFilter
  subjects: SubjectFilter
  updatedAt: DateTimeFilter
}

type Faculty {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  institute: Institute!
  majors: [Major!]!
  name: String!
  permissions: [FacultyPermissionType!]!
  updatedAt: DateTime!
}

input FacultyFilter {
  every: FacultyWhereInput
  none: FacultyWhereInput
  some: FacultyWhereInput
}

type FacultyPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Faculty!
  type: FacultyPermissionType!
  updatedAt: DateTime!
}

input FacultyPermissionFilter {
  every: FacultyPermissionWhereInput
  none: FacultyPermissionWhereInput
  some: FacultyPermissionWhereInput
}

enum FacultyPermissionType {
  DELETE_FACULTY
  READ_FACULTY
  UPDATE_FACULTY
}

input FacultyPermissionWhereInput {
  AND: [FacultyPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [FacultyPermissionWhereInput!]
  object: FacultyWhereInput
  OR: [FacultyPermissionWhereInput!]
  type: FacultyPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input FacultyWhereInput {
  AND: [FacultyWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  institute: InstituteWhereInput
  majors: MajorFilter
  name: StringFilter
  NOT: [FacultyWhereInput!]
  OR: [FacultyWhereInput!]
  permissions: FacultyPermissionFilter
  updatedAt: DateTimeFilter
}

"""Input of forgot password"""
input ForgotPasswordInput {
  email: String
}

"""Input of image upload"""
input ImageUploadInput {
  extension: String!
  file: String!
}

type Institute {
  createdAt: DateTime!
  deletedAt: DateTime
  departments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Department!]!
  faculties(after: ID, before: ID, first: Int, last: Int, skip: Int): [Faculty!]!
  id: ID!
  name: String!
  permissions: [InstitutePermissionType!]!
  updatedAt: DateTime!
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

input InstituteFilter {
  every: InstituteWhereInput
  none: InstituteWhereInput
  some: InstituteWhereInput
}

type InstitutePermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Institute!
  type: InstitutePermissionType!
  updatedAt: DateTime!
}

input InstitutePermissionFilter {
  every: InstitutePermissionWhereInput
  none: InstitutePermissionWhereInput
  some: InstitutePermissionWhereInput
}

enum InstitutePermissionType {
  CREATE_DEPARTMENT
  DELETE_INSTITUTE
  UPDATE_INSTITUTE
}

input InstitutePermissionWhereInput {
  AND: [InstitutePermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [InstitutePermissionWhereInput!]
  object: InstituteWhereInput
  OR: [InstitutePermissionWhereInput!]
  type: InstitutePermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input InstituteWhereInput {
  AND: [InstituteWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  departments: DepartmentFilter
  faculties: FacultyFilter
  id: StringFilter
  name: StringFilter
  NOT: [InstituteWhereInput!]
  OR: [InstituteWhereInput!]
  permissions: InstitutePermissionFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

input InstituteWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Language {
  code: LanguageCode!
  id: ID!
  name: String!
}

enum LanguageCode {
  en
  hu
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  code: LanguageCode
  id: StringFilter
  name: StringFilter
  NOT: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  subjects: SubjectFilter
  users: UserFilter
}

input LanguageWhereUniqueInput {
  code: LanguageCode
  id: ID
}

"""Input of login"""
input LoginUserInput {
  email: String!
  password: String!
}

type Major {
  createdAt: DateTime!
  deletedAt: DateTime
  faculty: Faculty!
  id: ID!
  name: String!
  permissions: [MajorPermissionType!]!
  subjects: [Subject!]!
  updatedAt: DateTime!
}

input MajorByTokenInput {
  token: String!
}

input MajorFilter {
  every: MajorWhereInput
  none: MajorWhereInput
  some: MajorWhereInput
}

type MajorPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Major!
  type: MajorPermissionType!
  updatedAt: DateTime!
}

input MajorPermissionFilter {
  every: MajorPermissionWhereInput
  none: MajorPermissionWhereInput
  some: MajorPermissionWhereInput
}

enum MajorPermissionType {
  DELETE_MAJOR
  READ_MAJOR
  UPDATE_MAJOR
}

input MajorPermissionWhereInput {
  AND: [MajorPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [MajorPermissionWhereInput!]
  object: MajorWhereInput
  OR: [MajorPermissionWhereInput!]
  type: MajorPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input MajorWhereInput {
  AND: [MajorWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  faculty: FacultyWhereInput
  id: StringFilter
  name: StringFilter
  NOT: [MajorWhereInput!]
  OR: [MajorWhereInput!]
  permissions: MajorPermissionFilter
  subjects: SubjectFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

type Mutation {
  activateInvitation(data: ActivateInvitationInput!): Boolean!
  activateRegistration(data: ActivateRegistrationInput!): User!
  approveSuggestion(where: WhereUniqueInput!): Suggestion!
  changeEmail(data: ChangeEmailInput!, where: WhereUniqueInput!): User!
  changePassword(data: ChangePasswordInput!, where: WhereUniqueInput!): User!
  changePreferredLanguage(data: ChangePreferredLanguageInput!, where: WhereUniqueInput!): User!
  createDepartment(data: CreateDepartmentInput!): Department!
  createFaculty(data: CreateFacultyInput!): Faculty!
  createInstitute(data: CreateInstituteInput!): Institute!
  createMajor(data: CreateMajorInput!): Major!
  createNewMajorRequest(data: CreateNewMajorRequest!): NewMajorRequest!
  createNote(data: CreateNoteInput!): Note!
  createNoteComment(data: CreateNoteCommentInput!): NoteComment!
  createNoteCommentThread(data: CreateNoteCommentThreadInput!): NoteCommentThread!
  createNoteHighlight(data: CreateNoteHighlightInput!): NoteHighlight!
  createPost(data: CreatePostInput!): Post!
  createPostComment(data: CreatePostCommentInput!): PostComment!
  createSubject(data: CreateSubjectInput!): Subject!
  createSubjectInformation(data: CreateSubjectInformationInput!): SubjectInformation!
  createSuggestion(data: CreateSuggestionInput!): Suggestion!
  createUser(data: CreateUserInput!): User!
  deleteDepartment(where: WhereUniqueInput!): Department!
  deleteFaculty(where: WhereUniqueInput!): Faculty!
  deleteInstitute(where: WhereUniqueInput!): Institute!
  deleteMajor(where: WhereUniqueInput!): Major!
  deleteNote(where: WhereUniqueInput!): Note!
  deleteNoteComment(where: WhereUniqueInput!): NoteComment!
  deleteNoteCommentThread(where: WhereUniqueInput!): NoteCommentThread!
  deleteNoteHighlight(where: WhereUniqueInput!): NoteHighlight!
  deletePost(where: WhereUniqueInput!): Post!
  deletePostComment(where: WhereUniqueInput!): PostComment!
  deleteSubject(where: WhereUniqueInput!): Subject!
  deleteSubjectInformation(where: WhereUniqueInput!): SubjectInformation!
  deleteSuggestion(where: WhereUniqueInput!): Suggestion!
  deleteUser(where: WhereUniqueInput!): User!
  dislikePost(where: WhereUniqueInput!): Post!
  forgotPassword(data: ForgotPasswordInput!): Boolean!
  likePost(where: WhereUniqueInput!): Post!
  login(data: LoginUserInput!): AuthenticationPayload!
  register(data: RegisterUserInput!): User!
  rejectSuggestion(where: WhereUniqueInput!): Suggestion!
  resetPassword(data: ResetPasswordInput!): Boolean!
  sendActivationEmails(data: SendActivationEmailsInput!): Boolean!
  updateDepartment(data: UpdateDepartmentInput!, where: WhereUniqueInput!): Department!
  updateFaculty(data: UpdateFacultyInput!, where: WhereUniqueInput!): Faculty!
  updateInstitute(data: UpdateInstituteInput!, where: WhereUniqueInput!): Institute!
  updateMajor(data: UpdateMajorInput!, where: WhereUniqueInput!): Major!
  updateNote(data: UpdateNoteInput!, where: WhereUniqueInput!): Note!
  updateNoteComment(data: UpdateNoteCommentInput!, where: WhereUniqueInput!): NoteComment!
  updateNoteHighlight(data: UpdateNoteHighlightInput!, where: WhereUniqueInput!): NoteHighlight!
  updatePost(data: UpdatePostInput!, where: WhereUniqueInput!): Post!
  updatePostComment(data: UpdatePostCommentInput!, where: WhereUniqueInput!): PostComment!
  updateSubject(data: UpdateSubjectInput!, where: WhereUniqueInput!): Subject!
  updateSubjectInformation(data: UpdateSubjectInformationInput!, where: WhereUniqueInput!): SubjectInformation!
  updateSuggestion(data: UpdateSuggestionInput!, where: WhereUniqueInput!): Suggestion!
  updateUser(data: UpdateUserInput!, where: WhereUniqueInput!): User!
  uploadImage(data: ImageUploadInput!): String!
  validateToken(data: ValidateTokenInput): Boolean!
}

type NewMajorRequest {
  faculty: String!
  id: ID!
  institute: String!
  major: String!
  user: User!
}

input NewMajorRequestWhereInput {
  AND: [NewMajorRequestWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  faculty: StringFilter
  id: StringFilter
  institute: StringFilter
  major: StringFilter
  NOT: [NewMajorRequestWhereInput!]
  OR: [NewMajorRequestWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

type Note {
  authors(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
  commentThreads(after: ID, before: ID, first: Int, last: Int, skip: Int): [NoteCommentThread!]!
  content: String!
  contentHTML: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  highlights(after: ID, before: ID, first: Int, last: Int, skip: Int): [NoteHighlight!]!
  id: ID!
  likers(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!

  """Number of likes on the note"""
  likesCount: Int!
  noteCategory: NoteCategory!
  number: Int!
  permissions: [NotePermissionType!]!
  subject: Subject!
  title: String!
  updatedAt: DateTime!
}

enum NoteCategory {
  CASE_STUDY
  NOTE
}

type NoteComment {
  author: User!
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  likers(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!

  """Number of likes on the note comment"""
  likesCount: Int!
  permissions: [NoteCommentPermissionType!]!
  thread: NoteCommentThread
  threadReply: NoteCommentThread
  updatedAt: DateTime!
}

input NoteCommentFilter {
  every: NoteCommentWhereInput
  none: NoteCommentWhereInput
  some: NoteCommentWhereInput
}

type NoteCommentPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: NoteComment!
  type: NoteCommentPermissionType!
  updatedAt: DateTime!
}

input NoteCommentPermissionFilter {
  every: NoteCommentPermissionWhereInput
  none: NoteCommentPermissionWhereInput
  some: NoteCommentPermissionWhereInput
}

enum NoteCommentPermissionType {
  DELETE_NOTE_COMMENT
  UPDATE_NOTE_COMMENT
}

input NoteCommentPermissionWhereInput {
  AND: [NoteCommentPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [NoteCommentPermissionWhereInput!]
  object: NoteCommentWhereInput
  OR: [NoteCommentPermissionWhereInput!]
  type: NoteCommentPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

type NoteCommentThread {
  comment: NoteComment!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  note: Note!
  position: String!
  replies(after: ID, before: ID, first: Int, last: Int, skip: Int): [NoteComment!]!
  updatedAt: DateTime!
}

input NoteCommentThreadFilter {
  every: NoteCommentThreadWhereInput
  none: NoteCommentThreadWhereInput
  some: NoteCommentThreadWhereInput
}

type NoteCommentThreadPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: NoteCommentThread!
  type: NoteCommentThreadPermissionType!
  updatedAt: DateTime!
}

input NoteCommentThreadPermissionFilter {
  every: NoteCommentThreadPermissionWhereInput
  none: NoteCommentThreadPermissionWhereInput
  some: NoteCommentThreadPermissionWhereInput
}

enum NoteCommentThreadPermissionType {
  DELETE_NOTE_COMMENT_THREAD
}

input NoteCommentThreadPermissionWhereInput {
  AND: [NoteCommentThreadPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [NoteCommentThreadPermissionWhereInput!]
  object: NoteCommentThreadWhereInput
  OR: [NoteCommentThreadPermissionWhereInput!]
  type: NoteCommentThreadPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input NoteCommentThreadWhereInput {
  AND: [NoteCommentThreadWhereInput!]
  comment: NoteCommentWhereInput
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [NoteCommentThreadWhereInput!]
  note: NoteWhereInput
  OR: [NoteCommentThreadWhereInput!]
  permissions: NoteCommentThreadPermissionFilter
  position: StringFilter
  replies: NoteCommentFilter
  updatedAt: DateTimeFilter
}

input NoteCommentThreadWhereUniqueInput {
  id: ID
}

input NoteCommentWhereInput {
  AND: [NoteCommentWhereInput!]
  author: UserWhereInput
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  likers: UserFilter
  NOT: [NoteCommentWhereInput!]
  OR: [NoteCommentWhereInput!]
  permissions: NoteCommentPermissionFilter
  thread: NoteCommentThreadWhereInput
  threadReply: NoteCommentThreadWhereInput
  updatedAt: DateTimeFilter
}

input NoteCommentWhereUniqueInput {
  id: ID
}

input NoteFilter {
  every: NoteWhereInput
  none: NoteWhereInput
  some: NoteWhereInput
}

type NoteHighlight {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  note: Note!
  position: String!
  updatedAt: DateTime!
  user: User!
}

input NoteHighlightFilter {
  every: NoteHighlightWhereInput
  none: NoteHighlightWhereInput
  some: NoteHighlightWhereInput
}

type NoteHighlightPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: NoteHighlight!
  type: NoteHighlightPermissionType!
  updatedAt: DateTime!
}

input NoteHighlightPermissionFilter {
  every: NoteHighlightPermissionWhereInput
  none: NoteHighlightPermissionWhereInput
  some: NoteHighlightPermissionWhereInput
}

enum NoteHighlightPermissionType {
  DELETE_NOTE_HIGHLIGHT
  UPDATE_NOTE_HIGHLIGHT
}

input NoteHighlightPermissionWhereInput {
  AND: [NoteHighlightPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [NoteHighlightPermissionWhereInput!]
  object: NoteHighlightWhereInput
  OR: [NoteHighlightPermissionWhereInput!]
  type: NoteHighlightPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input NoteHighlightWhereInput {
  AND: [NoteHighlightWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [NoteHighlightWhereInput!]
  note: NoteWhereInput
  OR: [NoteHighlightWhereInput!]
  permissions: NoteHighlightPermissionFilter
  position: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input NoteHighlightWhereUniqueInput {
  id: ID
}

type NotePermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Note!
  type: NotePermissionType!
  updatedAt: DateTime!
}

input NotePermissionFilter {
  every: NotePermissionWhereInput
  none: NotePermissionWhereInput
  some: NotePermissionWhereInput
}

enum NotePermissionType {
  CREATE_SUGGESTION
  DELETE_NOTE
  READ_NOTE
  UPDATE_NOTE
}

input NotePermissionWhereInput {
  AND: [NotePermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [NotePermissionWhereInput!]
  object: NoteWhereInput
  OR: [NotePermissionWhereInput!]
  type: NotePermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  authors: UserFilter
  commentThreads: NoteCommentThreadFilter
  content: StringFilter
  contentHTML: StringFilter
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  description: NullableStringFilter
  highlights: NoteHighlightFilter
  id: StringFilter
  likers: UserFilter
  NOT: [NoteWhereInput!]
  noteCategory: NoteCategory
  number: IntFilter
  OR: [NoteWhereInput!]
  permissions: NotePermissionFilter
  subject: SubjectWhereInput
  suggestions: SuggestionFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type PasswordToken {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  token: String!
  updatedAt: DateTime!
  user: User!
}

input PasswordTokenWhereInput {
  AND: [PasswordTokenWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [PasswordTokenWhereInput!]
  OR: [PasswordTokenWhereInput!]
  token: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

type Post {
  author: User!
  comments: [PostComment!]!
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime

  """Whether the logged in user liked a post before"""
  hasLikedPost: Boolean!
  id: ID!
  likers(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!

  """Number of likes on the post"""
  likesCount: Int!
  permissions: [PostPermissionType!]!
  subject: Subject!
  updatedAt: DateTime!
}

type PostComment {
  author: User!
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  likers(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!

  """Number of likes on the postComment"""
  likesCount: Int!
  permissions: [PostCommentPermissionType!]!
  post: Post
  updatedAt: DateTime!
}

input PostCommentFilter {
  every: PostCommentWhereInput
  none: PostCommentWhereInput
  some: PostCommentWhereInput
}

type PostCommentPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: PostComment!
  type: PostCommentPermissionType!
  updatedAt: DateTime!
}

input PostCommentPermissionFilter {
  every: PostCommentPermissionWhereInput
  none: PostCommentPermissionWhereInput
  some: PostCommentPermissionWhereInput
}

enum PostCommentPermissionType {
  DELETE_POSTCOMMENT
  READ_POSTCOMMENT
  UPDATE_POSTCOMMENT
}

input PostCommentPermissionWhereInput {
  AND: [PostCommentPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [PostCommentPermissionWhereInput!]
  object: PostCommentWhereInput
  OR: [PostCommentPermissionWhereInput!]
  type: PostCommentPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input PostCommentWhereInput {
  AND: [PostCommentWhereInput!]
  author: UserWhereInput
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  likers: UserFilter
  NOT: [PostCommentWhereInput!]
  OR: [PostCommentWhereInput!]
  permissions: PostCommentPermissionFilter
  post: PostWhereInput
  updatedAt: DateTimeFilter
}

input PostCommentWhereUniqueInput {
  id: ID
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Post!
  type: PostPermissionType!
  updatedAt: DateTime!
}

input PostPermissionFilter {
  every: PostPermissionWhereInput
  none: PostPermissionWhereInput
  some: PostPermissionWhereInput
}

enum PostPermissionType {
  CREATE_POSTCOMMENT
  DELETE_POST
  READ_POST
  UPDATE_POST
}

input PostPermissionWhereInput {
  AND: [PostPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [PostPermissionWhereInput!]
  object: PostWhereInput
  OR: [PostPermissionWhereInput!]
  type: PostPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  comments: PostCommentFilter
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  likers: UserFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  permissions: PostPermissionFilter
  subject: SubjectWhereInput
  updatedAt: DateTimeFilter
}

type Query {
  activeSuggestions(where: SuggestionsInput!): [Suggestion!]!
  department(where: WhereUniqueInput!): Department
  departments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Department!]!
  faculties: [Faculty!]!
  faculty(where: WhereUniqueInput!): Faculty
  institute(where: InstituteWhereUniqueInput!): Institute
  institutes(after: ID, before: ID, first: Int, last: Int, skip: Int): [Institute!]!
  institutesByToken(token: String!): [Institute!]!
  language(where: LanguageWhereUniqueInput!): Language
  languages(after: ID, before: ID, first: Int, last: Int, skip: Int): [Language!]!
  majorByToken(data: MajorByTokenInput, where: WhereUniqueInput): Major
  majors(after: ID, before: ID, first: Int, last: Int, skip: Int): [Major!]!
  me: User!
  note(where: WhereUniqueInput!): Note
  noteComment(where: NoteCommentWhereUniqueInput!): NoteComment
  noteCommentThread(where: NoteCommentThreadWhereUniqueInput!): NoteCommentThread
  noteHighlight(where: NoteHighlightWhereUniqueInput!): NoteHighlight
  postComment(where: PostCommentWhereUniqueInput!): PostComment
  posts: [Post!]!
  subject(where: WhereUniqueInput!): Subject
  subjectInformation(where: SubjectInformationWhereUniqueInput!): SubjectInformation
  subjects(after: ID, before: ID, first: Int, last: Int, skip: Int): [Subject!]!
  suggestion(where: SuggestionWhereUniqueInput!): Suggestion
  user(where: UserWhereUniqueInput!): User
  userInfo(token: String): User
  users(after: ID, before: ID, first: Int, last: Int, skip: Int, where: QueryUsersWhereInput): [User!]!
}

input QueryUsersWhereInput {
  email: StringFilter
  firstName: StringFilter
  identifier: NullableStringFilter
  isActive: BooleanFilter
  lastName: StringFilter
  phoneNumber: NullableStringFilter
  role: UserRoleWhereInput
}

"""Input of register"""
input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  preferredLanguage: ConnectRelation
}

"""Input of reset password"""
input ResetPasswordInput {
  password: String!
  token: String!
}

type ResetPasswordToken {
  createdAt: DateTime!
  email: ID!
  token: String!
}

input ResetPasswordTokenWhereInput {
  AND: [ResetPasswordTokenWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  NOT: [ResetPasswordTokenWhereInput!]
  OR: [ResetPasswordTokenWhereInput!]
  token: StringFilter
  users: UserFilter
}

"""Input of activation emails"""
input SendActivationEmailsInput {
  ids: [String!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subject {
  code: String!
  createdAt: DateTime!
  deletedAt: DateTime
  department: Department!
  description: String!
  id: ID!
  informations: [SubjectInformation!]!
  language: Language!
  moderators(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
  name: String!
  notes: [Note!]!
  permissions: [SubjectPermissionType!]!
  posts: [Post!]!
  students: [User!]!
  teachers: [User!]!
  updatedAt: DateTime!
}

input SubjectFilter {
  every: SubjectWhereInput
  none: SubjectWhereInput
  some: SubjectWhereInput
}

type SubjectInformation {
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  permissions: [SubjectInformationPermissionType!]!
  subject: Subject!
  subtitle: String
  title: String!
  updatedAt: DateTime!
}

input SubjectInformationFilter {
  every: SubjectInformationWhereInput
  none: SubjectInformationWhereInput
  some: SubjectInformationWhereInput
}

type SubjectInformationPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: SubjectInformation!
  type: SubjectInformationPermissionType!
  updatedAt: DateTime!
}

input SubjectInformationPermissionFilter {
  every: SubjectInformationPermissionWhereInput
  none: SubjectInformationPermissionWhereInput
  some: SubjectInformationPermissionWhereInput
}

enum SubjectInformationPermissionType {
  DELETE_SUBJECT_INFORMATION
  READ_SUBJECT_INFORMATION
  UPDATE_SUBJECT_INFORMATION
}

input SubjectInformationPermissionWhereInput {
  AND: [SubjectInformationPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [SubjectInformationPermissionWhereInput!]
  object: SubjectInformationWhereInput
  OR: [SubjectInformationPermissionWhereInput!]
  type: SubjectInformationPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input SubjectInformationWhereInput {
  AND: [SubjectInformationWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [SubjectInformationWhereInput!]
  OR: [SubjectInformationWhereInput!]
  permissions: SubjectInformationPermissionFilter
  subject: SubjectWhereInput
  subtitle: NullableStringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input SubjectInformationWhereUniqueInput {
  id: ID
}

type SubjectPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Subject!
  type: SubjectPermissionType!
  updatedAt: DateTime!
}

input SubjectPermissionFilter {
  every: SubjectPermissionWhereInput
  none: SubjectPermissionWhereInput
  some: SubjectPermissionWhereInput
}

enum SubjectPermissionType {
  CREATE_NOTE
  CREATE_POST
  CREATE_SUBJECT_INFORMATION
  DELETE_SUBJECT
  READ_SUBJECT
  UPDATE_SUBJECT
}

input SubjectPermissionWhereInput {
  AND: [SubjectPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [SubjectPermissionWhereInput!]
  object: SubjectWhereInput
  OR: [SubjectPermissionWhereInput!]
  type: SubjectPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input SubjectWhereInput {
  AND: [SubjectWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  department: DepartmentWhereInput
  description: StringFilter
  id: StringFilter
  informations: SubjectInformationFilter
  language: LanguageWhereInput
  majors: MajorFilter
  moderators: UserFilter
  name: StringFilter
  NOT: [SubjectWhereInput!]
  notes: NoteFilter
  OR: [SubjectWhereInput!]
  permissions: SubjectPermissionFilter
  posts: PostFilter
  students: UserFilter
  teachers: UserFilter
  updatedAt: DateTimeFilter
}

type Subscription {
  approvedSuggestion(where: WhereUniqueInput!): Suggestion!
  createdSuggestion(where: WhereUniqueInput!): Suggestion!
  rejectedSuggestion(where: WhereUniqueInput!): Suggestion!
  updatedSuggestion(where: WhereUniqueInput!): Suggestion!
}

type Suggestion {
  approvedAt: DateTime
  approvedBy: User
  author: User!
  createdAt: DateTime!
  deletedAt: DateTime
  delta: String!
  id: ID!
  likers(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!

  """Number of likes on the suggestion"""
  likesCount: Int!
  note: Note!
  permissions: [SuggestionPermissionType!]!
  rejectedAt: DateTime
  updatedAt: DateTime!
}

input SuggestionFilter {
  every: SuggestionWhereInput
  none: SuggestionWhereInput
  some: SuggestionWhereInput
}

type SuggestionPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: Suggestion!
  type: SuggestionPermissionType!
  updatedAt: DateTime!
}

input SuggestionPermissionFilter {
  every: SuggestionPermissionWhereInput
  none: SuggestionPermissionWhereInput
  some: SuggestionPermissionWhereInput
}

enum SuggestionPermissionType {
  APPROVE_SUGGESTION
  DELETE_SUGGESTION
  READ_SUGGESTION
  REJECT_SUGGESTION
  UPDATE_SUGGESTION
}

input SuggestionPermissionWhereInput {
  AND: [SuggestionPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [SuggestionPermissionWhereInput!]
  object: SuggestionWhereInput
  OR: [SuggestionPermissionWhereInput!]
  type: SuggestionPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input SuggestionsInput {
  noteID: ID
}

input SuggestionWhereInput {
  AND: [SuggestionWhereInput!]
  approvedAt: NullableDateTimeFilter
  approvedBy: UserWhereInput
  author: UserWhereInput
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  delta: StringFilter
  id: StringFilter
  likers: UserFilter
  NOT: [SuggestionWhereInput!]
  note: NoteWhereInput
  OR: [SuggestionWhereInput!]
  permissions: SuggestionPermissionFilter
  rejectedAt: NullableDateTimeFilter
  updatedAt: DateTimeFilter
}

input SuggestionWhereUniqueInput {
  id: ID
}

enum TokenType {
  ACTIVATION
  RESET_PASSWORD
}

"""Input of update department"""
input UpdateDepartmentInput {
  description: String
  leader: ConnectRelation
  name: String
}

"""Input of update faculty"""
input UpdateFacultyInput {
  institute: ConnectRelation
  major: ConnectOrDisconnectRelation
  name: String
}

"""Input of update institute"""
input UpdateInstituteInput {
  departments: ConnectOrDisconnectRelation
  faculties: ConnectOrDisconnectRelation
  name: String
}

"""Input of update major"""
input UpdateMajorInput {
  faculty: ConnectRelation
  name: String
  subjects: ConnectOrDisconnectRelation
}

"""Input of update note comment"""
input UpdateNoteCommentInput {
  content: String
}

"""Input of update note highlight"""
input UpdateNoteHighlightInput {
  position: String
}

"""Input of update note"""
input UpdateNoteInput {
  content: String
  contentHTML: String
  description: String
  noteCategory: NoteCategory
  number: Int
  title: String
}

"""Input of update post comment"""
input UpdatePostCommentInput {
  content: String
}

"""Input of update post"""
input UpdatePostInput {
  content: String
}

"""Input of update subject information"""
input UpdateSubjectInformationInput {
  content: String
  subtitle: String
  title: String
}

"""Input of update subject"""
input UpdateSubjectInput {
  code: String
  description: String
  moderators: ConnectOrDisconnectRelation
  name: String
  students: ConnectOrDisconnectRelation
  teachers: ConnectOrDisconnectRelation
}

"""Input of update suggestion"""
input UpdateSuggestionInput {
  delta: String
}

"""Input of update user"""
input UpdateUserInput {
  email: String
  firstName: String
  identifier: String
  lastName: String
  position: String
  studiedSubjects: [String!]
}

type User {
  approvedSuggestions(after: ID, before: ID, first: Int, last: Int, skip: Int): [Suggestion!]!
  createdAt: DateTime!
  deletedAt: DateTime
  departments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Department!]!
  email: String!
  firstName: String!
  fullName: String!
  id: ID!
  identifier: String
  institutes(after: ID, before: ID, first: Int, last: Int, skip: Int): [Institute!]!
  lastName: String!
  likedNotes(after: ID, before: ID, first: Int, last: Int, skip: Int): [Note!]!
  likedPostComments(after: ID, before: ID, first: Int, last: Int, skip: Int): [PostComment!]!
  major: Major
  newMajorRequest: NewMajorRequest
  noteComments(after: ID, before: ID, first: Int, last: Int, skip: Int): [NoteComment!]!
  noteHighlights(after: ID, before: ID, first: Int, last: Int, skip: Int): [NoteHighlight!]!
  notes(after: ID, before: ID, first: Int, last: Int, skip: Int): [Note!]!
  password: String!
  permissions: [UserPermissionType!]!
  phoneNumber: String
  position: String
  preferredLanguage: Language
  profilePictureURL: String
  role: UserRole
  studiedSubjects: [Subject!]!
  suggestions(after: ID, before: ID, first: Int, last: Int, skip: Int): [Suggestion!]!
  teachedSubjects: [Subject!]!
  updatedAt: DateTime!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  object: User!
  type: UserPermissionType!
  updatedAt: DateTime!
}

input UserPermissionFilter {
  every: UserPermissionWhereInput
  none: UserPermissionWhereInput
  some: UserPermissionWhereInput
}

enum UserPermissionType {
  DELETE_USER
  UPDATE_PROFILE
  UPDATE_USER
}

input UserPermissionWhereInput {
  AND: [UserPermissionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  NOT: [UserPermissionWhereInput!]
  object: UserWhereInput
  OR: [UserPermissionWhereInput!]
  type: UserPermissionType
  updatedAt: DateTimeFilter
  users: UserFilter
}

type UserRole {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  type: UserRoleType!
  updatedAt: DateTime!
}

enum UserRoleType {
  ADMIN
  PROFESSOR
  USER
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  type: UserRoleType
  updatedAt: DateTimeFilter
  users: UserFilter
}

input UserWhereInput {
  activationToken: ActivationTokenWhereInput
  AND: [UserWhereInput!]
  approvedSuggestions: SuggestionFilter
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  departmentPermissions: DepartmentPermissionFilter
  departments: DepartmentFilter
  email: StringFilter
  facultyPermissions: FacultyPermissionFilter
  firstName: StringFilter
  id: StringFilter
  identifier: NullableStringFilter
  institutePermissions: InstitutePermissionFilter
  institutes: InstituteFilter
  isActive: BooleanFilter
  lastName: StringFilter
  likedNoteComments: NoteCommentFilter
  likedNotes: NoteFilter
  likedPostComments: PostCommentFilter
  likedPosts: PostFilter
  likedSuggestions: SuggestionFilter
  major: MajorWhereInput
  majorPermissions: MajorPermissionFilter
  moderatedSubjects: SubjectFilter
  newMajorRequest: NewMajorRequestWhereInput
  NOT: [UserWhereInput!]
  noteCommentPermissions: NoteCommentPermissionFilter
  noteComments: NoteCommentFilter
  noteCommentThreadPermissions: NoteCommentThreadPermissionFilter
  noteHighlightPermissions: NoteHighlightPermissionFilter
  noteHighlights: NoteHighlightFilter
  notePermissions: NotePermissionFilter
  notes: NoteFilter
  OR: [UserWhereInput!]
  password: StringFilter
  passwordToken: PasswordTokenWhereInput
  permissions: UserPermissionFilter
  phoneNumber: NullableStringFilter
  position: NullableStringFilter
  postCommentPermissions: PostCommentPermissionFilter
  postComments: PostCommentFilter
  postPermissions: PostPermissionFilter
  posts: PostFilter
  preferredLanguage: LanguageWhereInput
  profilePictureURL: NullableStringFilter
  ResetPasswordToken: ResetPasswordTokenWhereInput
  role: UserRoleWhereInput
  studiedSubjects: SubjectFilter
  subjectInformationPermissions: SubjectInformationPermissionFilter
  subjectPermissions: SubjectPermissionFilter
  suggestionPermissions: SuggestionPermissionFilter
  suggestions: SuggestionFilter
  teachedSubjects: SubjectFilter
  updatedAt: DateTimeFilter
  userPermissions: UserPermissionFilter
}

input UserWhereUniqueInput {
  email: String
  id: ID
}

input ValidateTokenInput {
  token: String!
  type: TokenType!
}

"""Unique input"""
input WhereUniqueInput {
  id: ID
}
