### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


"""Input of activation user"""
input ActivateUserInput {
  password: String!
  token: String!
}

type ActivationToken {
  createdAt: DateTime!
  id: ID!
  token: String!
  user: User!
}

type AuthenticationPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input ConnectRelation {
  id: ID!
}

"""Input of create department"""
input CreateDepartmentInput {
  description: String!
  institute: ConnectRelation!
  leader: ConnectRelation!
  name: String!
}

"""Input of create institute"""
input CreateInstituteInput {
  description: String!
  name: String!
}

"""Input of create note comment"""
input CreateNoteCommentInput {
  author: ConnectRelation!
  content: String!
  name: String!
}

"""Input of create note comment"""
input CreateNoteCommentThreadInput {
  comment: ConnectRelation!
  name: String!
  note: ConnectRelation!
  position: String!
}

"""Input of create note highlight"""
input CreateNoteHighlightInput {
  note: ConnectRelation!
  position: String!
  user: ConnectRelation!
}

"""Input of create note"""
input CreateNoteInput {
  content: String!
  contentHTML: String!
  description: String
  name: String!
  noteCategory: NoteCategoryEnum!
  number: Int!
  subject: ConnectRelation!
  title: String!
}

"""Input of create subject information"""
input CreateSubjectInformationInput {
  content: String!
  subject: ConnectRelation!
  subtitle: String
  title: String!
}

"""Input of create subject"""
input CreateSubjectInput {
  code: String!
  department: ConnectRelation!
  description: String!
  language: ConnectRelation!
  name: String!
}

"""Input of create suggestion"""
input CreateSuggestionInput {
  author: ConnectRelation!
  delta: String!
  note: ConnectRelation!
}

"""DateTime"""
scalar DateTime

type Department {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: ID!
  institute: Institute!
  leader: User!
  name: String!
  subjects(after: String, before: String, first: Int, last: Int, skip: Int): [Subject!]
  updatedAt: DateTime!
}

type DepartmentPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [Department!]
  type: DepartmentPermissionTypeEnum!
  updatedAt: DateTime!
}

enum DepartmentPermissionTypeEnum {
  CREATE_SUBJECT
  DELETE_DEPARTMENT
  UPDATE_DEPARTMENT
}

input DepartmentWhereUniqueInput {
  id: ID
}

"""Input of forgot password"""
input ForgotPasswordInput {
  email: String
}

"""Input of image upload"""
input ImageUploadInput {
  extension: String!
  file: String!
}

type Institute {
  createdAt: DateTime!
  deletedAt: DateTime
  departments(after: String, before: String, first: Int, last: Int, skip: Int): [Department!]
  id: ID!
  name: String!
  updatedAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

type InstitutePermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [Institute!]
  type: InstitutePermissionTypeEnum!
  updatedAt: DateTime!
}

enum InstitutePermissionTypeEnum {
  CREATE_DEPARTMENT
  DELETE_INSTITUTE
  UPDATE_INSTITUTE
}

input InstituteWhereUniqueInput {
  id: ID
}

type Language {
  code: String!
  id: ID!
  name: String!
}

input LanguageWhereUniqueInput {
  code: String
  id: ID
}

type Mutation {
  activateUser(data: ActivateUserInput!): AuthenticationPayload!
  createDepartment(data: CreateDepartmentInput!): Department!
  createInstitute(data: CreateInstituteInput!): Institute!
  createNote(data: CreateNoteInput!): Note!
  createNoteComment(data: CreateNoteCommentInput!): NoteComment!
  createNoteCommentThread(data: CreateNoteCommentThreadInput!): NoteCommentThread!
  createNoteHighlight(data: CreateNoteHighlightInput!): NoteHighlight!
  createSubject(data: CreateSubjectInput!): Subject!
  createSubjectInformation(data: CreateSubjectInformationInput!): SubjectInformation!
  createSuggestion(data: CreateSuggestionInput!): Suggestion!
  deleteDepartment(where: WhereUniqueInput!): Department!
  deleteInstitute(where: WhereUniqueInput!): Institute!
  deleteNote(where: WhereUniqueInput!): Note!
  deleteNoteComment(where: WhereUniqueInput!): NoteComment!
  deleteNoteCommentThread(where: WhereUniqueInput!): NoteCommentThread!
  deleteNoteHighlight(where: WhereUniqueInput!): NoteHighlight!
  deleteSubject(where: WhereUniqueInput!): Subject!
  deleteSubjectInformation(where: WhereUniqueInput!): SubjectInformation!
  deleteSuggestion(where: WhereUniqueInput!): Suggestion!
  deleteUser(where: WhereUniqueInput!): User!
  forgotPassword(data: ForgotPasswordInput!): String!
  login(data: UserLoginInput!): AuthenticationPayload!
  resetPassword(data: ResetPasswordInput!): AuthenticationPayload!
  updateDepartment(data: UpdateDepartmentInput!, where: WhereUniqueInput!): Department!
  updateInstitute(data: UpdateInstituteInput!, where: WhereUniqueInput!): Institute!
  updateNote(data: UpdateNoteInput!, where: WhereUniqueInput!): Note!
  updateNoteComment(data: UpdateNoteCommentInput!, where: WhereUniqueInput!): NoteComment!
  updateNoteHighlight(data: UpdateNoteHighlightInput!, where: WhereUniqueInput!): NoteHighlight!
  updateSubject(data: UpdateSubjectInput!, where: WhereUniqueInput!): Subject!
  updateSubjectInformation(data: UpdateSubjectInformationInput!, where: WhereUniqueInput!): SubjectInformation!
  updateSuggestion(data: UpdateSuggestionInput!, where: WhereUniqueInput!): Suggestion!
  updateUser(data: UpdateUserInput!, where: WhereUniqueInput!): User!
  uploadImage(data: ImageUploadInput!): String!
}

type Note {
  authors(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  commentThreads(after: String, before: String, first: Int, last: Int, skip: Int): [NoteCommentThread!]
  content: String!
  contentHTML: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  highlights(after: String, before: String, first: Int, last: Int, skip: Int): [NoteHighlight!]
  id: ID!
  likers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]

  """Number of likes on the note"""
  likesCount: Int!
  noteCategory: NoteCategoryEnum!
  number: Int!
  subject: Subject!
  suggestions(after: String, before: String, first: Int, last: Int, skip: Int): [Suggestion!]
  title: String!
  updatedAt: DateTime!
}

enum NoteCategoryEnum {
  CASE_STUDY
  NOTE
}

type NoteComment {
  author: User!
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  likers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]

  """Number of likes on the note comment"""
  likesCount: Int!
  thread: NoteCommentThread
  threadReply: NoteCommentThread
  updatedAt: DateTime!
}

type NoteCommentPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [NoteComment!]
  type: NoteCommentPermissionTypeEnum!
  updatedAt: DateTime!
}

enum NoteCommentPermissionTypeEnum {
  DELETE_NOTE_COMMENT
  UPDATE_NOTE_COMMENT
}

type NoteCommentThread {
  comment: NoteComment!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  note: Note!
  position: String!
  replies(after: String, before: String, first: Int, last: Int, skip: Int): [NoteComment!]
  updatedAt: DateTime!
}

type NoteCommentThreadPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [NoteCommentThread!]
  type: NoteCommentThreadPermissionTypeEnum!
  updatedAt: DateTime!
}

enum NoteCommentThreadPermissionTypeEnum {
  DELETE_NOTE_COMMENT_THREAD
}

input NoteCommentThreadWhereUniqueInput {
  id: ID
}

input NoteCommentWhereUniqueInput {
  id: ID
}

type NoteHighlight {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  note: Note!
  position: String!
  updatedAt: DateTime!
  user: User!
}

type NoteHighlightPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [NoteHighlight!]
  type: NoteHighlightPermissionTypeEnum!
  updatedAt: DateTime!
}

enum NoteHighlightPermissionTypeEnum {
  DELETE_NOTE_HIGHLIGHT
  UPDATE_NOTE_HIGHLIGHT
}

input NoteHighlightWhereUniqueInput {
  id: ID
}

type NotePermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [Note!]
  type: NotePermissionTypeEnum!
  updatedAt: DateTime!
}

enum NotePermissionTypeEnum {
  CREATE_SUGGESTION
  DELETE_NOTE
  UPDATE_NOTE
}

input NoteWhereUniqueInput {
  id: ID
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type PasswordToken {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  token: String!
  updatedAt: DateTime!
  user: User!
}

type Permission {
  departmentPermission: DepartmentPermission
  id: ID!
  institutePermission: InstitutePermission
  noteCommentPermission: NoteCommentPermission
  noteCommentThreadPermission: NoteCommentThreadPermission
  noteHighlightPermission: NoteHighlightPermission
  notePermission: NotePermission
  subjectInformationPermission: SubjectInformationPermission
  subjectPermission: SubjectPermission
  suggestionPermission: SuggestionPermission
  userPermission: UserPermission
}

type Query {
  department(where: DepartmentWhereUniqueInput!): Department
  institute(where: InstituteWhereUniqueInput!): Institute
  institutes(after: String, before: String, first: Int, last: Int, skip: Int): [Institute!]
  language(where: LanguageWhereUniqueInput!): Language
  languages(after: String, before: String, first: Int, last: Int, skip: Int): [Language!]
  me: User!
  note(where: NoteWhereUniqueInput!): Note
  noteComment(where: NoteCommentWhereUniqueInput!): NoteComment
  noteCommentThread(where: NoteCommentThreadWhereUniqueInput!): NoteCommentThread
  noteHighlight(where: NoteHighlightWhereUniqueInput!): NoteHighlight
  subject(where: SubjectWhereUniqueInput!): Subject
  subjectInformation(where: SubjectInformationWhereUniqueInput!): SubjectInformation
  suggestion(where: SuggestionWhereUniqueInput!): Suggestion
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, skip: Int, where: QueryFindManyUserWhereInput): [User!]
}

input QueryFindManyUserWhereInput {
  email: StringFilter
  firstName: StringFilter
  identifier: StringFilter
  isActive: BooleanFilter
  lastName: StringFilter
  phoneNumber: NullableStringFilter
  role: QueryFindManyUserWhereInput
}

"""Input of reset password"""
input ResetPasswordInput {
  password: String!
  token: String!
}

type ResetPasswordToken {
  createdAt: DateTime!
  email: ID!
  token: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subject {
  code: String!
  createdAt: DateTime!
  deletedAt: DateTime
  department: Department!
  description: String!
  id: ID!
  informations(after: String, before: String, first: Int, last: Int, skip: Int): [SubjectInformation!]
  name: String!
  notes(after: String, before: String, first: Int, last: Int, skip: Int): [Note!]
  students(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  teachers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  updatedAt: DateTime!
}

type SubjectInformation {
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  subject: Subject!
  subtitle: String
  title: String!
  updatedAt: DateTime!
}

type SubjectInformationPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [SubjectInformation!]
  type: SubjectInformationPermissionTypeEnum!
  updatedAt: DateTime!
}

enum SubjectInformationPermissionTypeEnum {
  DELETE_SUBJECT_INFORMATION
  UPDATE_SUBJECT_INFORMATION
}

input SubjectInformationWhereUniqueInput {
  id: ID
}

type SubjectPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [Subject!]
  type: SubjectPermissionTypeEnum!
  updatedAt: DateTime!
}

enum SubjectPermissionTypeEnum {
  CREATE_NOTE
  DELETE_SUBJECT
  UPDATE_SUBJECT
}

input SubjectWhereUniqueInput {
  code: String
  id: ID
}

type Suggestion {
  approvedAt: DateTime
  approvedBy: User
  author: User!
  deletedAt: DateTime
  delta: String!
  id: ID!
  likers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]

  """Number of likes on the suggestion"""
  likesCount: Int!
  note: Note!
  updatedAt: DateTime!
}

type SuggestionPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [Suggestion!]
  type: SuggestionPermissionTypeEnum!
  updatedAt: DateTime!
}

enum SuggestionPermissionTypeEnum {
  APPROVE_SUGGESTION
  DELETE_SUGGESTION
  REJECT_SUGGESTION
  UPDATE_SUGGESTION
}

input SuggestionWhereUniqueInput {
  id: ID
}

"""Input of update department"""
input UpdateDepartmentInput {
  description: String
  leader: ConnectRelation
  name: String
}

"""Input of update institute"""
input UpdateInstituteInput {
  description: String
  name: String
}

"""Input of update note comment"""
input UpdateNoteCommentInput {
  content: String
}

"""Input of update note highlight"""
input UpdateNoteHighlightInput {
  position: String
}

"""Input of update note"""
input UpdateNoteInput {
  content: String
  contentHTML: String
  description: String
  name: String
  noteCategory: NoteCategoryEnum
  number: Int
  title: String
}

"""Input of update subject information"""
input UpdateSubjectInformationInput {
  content: String
  subtitle: String
  title: String
}

"""Input of update subject"""
input UpdateSubjectInput {
  code: String
  description: String
  name: String
}

"""Input of update suggestion"""
input UpdateSuggestionInput {
  delta: String
}

"""Input of update user"""
input UpdateUserInput {
  email: String
  password: String
}

type User {
  approvedSuggestions(after: String, before: String, first: Int, last: Int, skip: Int): [Suggestion!]
  comments(after: String, before: String, first: Int, last: Int, skip: Int): [NoteComment!]
  createdAt: DateTime!
  deletedAt: DateTime
  departments(after: String, before: String, first: Int, last: Int, skip: Int): [Department!]
  email: String!
  firstName: String!
  id: ID!
  identifier: String!
  institutes(after: String, before: String, first: Int, last: Int, skip: Int): [Institute!]
  lastName: String!
  likedComments(after: String, before: String, first: Int, last: Int, skip: Int): [NoteComment!]
  likedNotes(after: String, before: String, first: Int, last: Int, skip: Int): [Note!]
  noteHighlights(after: String, before: String, first: Int, last: Int, skip: Int): [NoteHighlight!]
  notes(after: String, before: String, first: Int, last: Int, skip: Int): [Note!]
  password: String!
  passwordToken: PasswordToken
  phoneNumber: String
  preferredLanguage: Language
  profilePictureURL: String
  role: UserRole!
  studiedSubjects(after: String, before: String, first: Int, last: Int, skip: Int): [Subject!]
  suggestions(after: String, before: String, first: Int, last: Int, skip: Int): [Suggestion!]
  teachedSubjects(after: String, before: String, first: Int, last: Int, skip: Int): [Subject!]
  updatedAt: DateTime!
}

"""Input of login"""
input UserLoginInput {
  email: String!
  password: String!
}

type UserPermission {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  objects(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  type: UserPermissionTypeEnum!
  updatedAt: DateTime!
}

enum UserPermissionTypeEnum {
  DELETE_USER
  UPDATE_USER
}

type UserRole {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  type: UserRoleTypeEnum!
  updatedAt: DateTime!
}

enum UserRoleTypeEnum {
  ADMIN
  PROFESSOR
  USER
}

input UserWhereUniqueInput {
  email: String
  id: ID
}

"""Unique input"""
input WhereUniqueInput {
  id: ID
}
