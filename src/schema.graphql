### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

"""DateTime"""
scalar DateTime

type Department {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: ID!
  institute: Institute!
  leader: User!
  name: String!
  subjects(after: String, before: String, first: Int, last: Int, skip: Int): [Subject!]
  updatedAt: DateTime!
}

type Institute {
  createdAt: DateTime!
  deletedAt: DateTime
  departments(after: String, before: String, first: Int, last: Int, skip: Int): [Department!]
  id: ID!
  name: String!
  updatedAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

type Mutation {
  login(email: String, password: String): AuthPayload!
}

type Note {
  authors(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  commentThreads(after: String, before: String, first: Int, last: Int, skip: Int): [NoteCommentThread!]
  content: String!
  contentHTML: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  highlights(after: String, before: String, first: Int, last: Int, skip: Int): [NoteHighlight!]
  id: ID!
  likers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]

  """Number of likes on the note"""
  likesCount: Int!
  noteCategory: NoteCategoryEnum!
  number: Int!
  subject: Subject!
  suggestions(after: String, before: String, first: Int, last: Int, skip: Int): [Suggestion!]
  title: String!
  updatedAt: DateTime!
}

enum NoteCategoryEnum {
  CASE_STUDY
  NOTE
}

type NoteComment {
  author: User!
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  likers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  thread: NoteCommentThread
  threadReply: NoteCommentThread
  updatedAt: DateTime!
}

type NoteCommentThread {
  comment: NoteComment!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  note: Note!
  position: String!
  replies(after: String, before: String, first: Int, last: Int, skip: Int): [NoteComment!]
  updatedAt: DateTime!
}

type NoteHighlight {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  note: Note!
  position: String!
  updatedAt: DateTime!
  user: User!
}

type PasswordToken {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  token: String!
  updatedAt: DateTime!
  user: User!
}

type Query {
  me: User!
}

type Subject {
  code: String!
  createdAt: DateTime!
  deletedAt: DateTime
  department: Department!
  description: String!
  id: ID!
  informations(after: String, before: String, first: Int, last: Int, skip: Int): [SubjectInformation!]
  name: String!
  notes(after: String, before: String, first: Int, last: Int, skip: Int): [Note!]
  students(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  teachers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  updatedAt: DateTime!
}

type SubjectInformation {
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  subject: Subject!
  subtitle: String
  title: String!
  updatedAt: DateTime!
}

type Suggestion {
  approvedAt: DateTime
  approvedBy: User
  author: User!
  deletedAt: DateTime
  delta: String!
  id: ID!
  likers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  note: Note!
  updatedAt: DateTime!
}

type User {
  approvedSuggestions(after: String, before: String, first: Int, last: Int, skip: Int): [Suggestion!]
  comments(after: String, before: String, first: Int, last: Int, skip: Int): [NoteComment!]
  createdAt: DateTime!
  deletedAt: DateTime
  departments(after: String, before: String, first: Int, last: Int, skip: Int): [Department!]
  email: String!
  firstName: String!
  id: ID!
  identifier: String!
  institutes(after: String, before: String, first: Int, last: Int, skip: Int): [Institute!]
  lastName: String!
  likedComments(after: String, before: String, first: Int, last: Int, skip: Int): [NoteComment!]
  likedNotes(after: String, before: String, first: Int, last: Int, skip: Int): [Note!]
  noteHighlights(after: String, before: String, first: Int, last: Int, skip: Int): [NoteHighlight!]
  notes(after: String, before: String, first: Int, last: Int, skip: Int): [Note!]
  password: String!
  passwordToken: PasswordToken!
  phoneNumber: String
  profilePictureURL: String
  role: UserRole!
  studiedSubjects(after: String, before: String, first: Int, last: Int, skip: Int): [Subject!]
  suggestions(after: String, before: String, first: Int, last: Int, skip: Int): [Suggestion!]
  teachedSubjects(after: String, before: String, first: Int, last: Int, skip: Int): [Subject!]
  updatedAt: DateTime!
}

type UserRole {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  type: UserRoleTypeEnum!
  updatedAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

enum UserRoleTypeEnum {
  ADMIN
  PROFESSOR
  USER
}
