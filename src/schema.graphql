scalar DateTime

type Query {
  me: User
  users: [User!]
  notes: [Note!]
  subjects: [Subject!]
  note(id: ID!): Note
  subject(id: ID!): Subject
}

type Mutation {
  signup(
    email: String!
    password: String!
    neptun: String!
    role: UserRole!
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

enum NoteType {
  NOTE
  CASE_STUDY
}

enum UserRole {
  USER
  ADMIN
}

type Note {
  id: ID!
  text: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  subject: Subject!
  comments: [Comment!]
  type: NoteType!
  upvotes: [User!]
}

type Comment {
  id: ID!
  text: String!
  createdAt: DateTime!
  note: Note!
  author: User!
  replies: [Comment!]
  upvotes: [User!]
}

type Subject {
  id: ID!
  code: String!
  name: String!
  description: String!
  faculty: [User!]
  students: [User!]
  info: [SubjectInfo!]
  notes: [Note!]
  prerequisites: [Subject!]
}

type SubjectInfo {
  title: String!
  subtitle: String
  text: String!
  subject: Subject!
}

type User {
  id: ID!
  email: String!
  neptun: String!
  password: String!
  firstName: String
  lastName: String
  role: UserRole!
}
